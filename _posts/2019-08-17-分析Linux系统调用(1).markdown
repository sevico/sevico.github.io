---
layout: post
title:  "分析Linux系统调用-开篇"
date:   2019-08-17 16:50:45 +0800
categories: Linux
---

在不同类型的操作系统上，系统调用都是内核给用户态的应用程序提供操作原语最主要的方式。虽然Linux内核在此基础上还有其他的途径来给用户程序提供一些接口(例如proc文件系统，netlink)，但也或多或少地依赖了系统调用。所以对Linux系统调用的实现进行分析，打开这个黑盒子，能进一步了解其底层实现，进而将一些操作系统概念与真实世界的实作联系起来，甚至能发现许多手册上没有提到，或者表述不清的地方(毕竟手册上的东西更多表述的是抽象接口，但为了保证后续的稳定性，请不要过度依赖这些从实现角度得到的特性)！况且，这件事本身也非常有意思！

在这一系列的文章中，分析的对象为Linux的4.4版本内核。可以下载一份对应的源码进行学习。

首先，你不能分析一个你看不见的东西。而在Linux内核的较高版本上，已经将通过宏定义的方式来声明系统调用。
老版本(2.6.24)如下：

```
asmlinkage unsigned long sys_alarm(unsigned int seconds)
{
	return alarm_setitimer(seconds);
}
```

而在较高(4.4)版本的源码中，已变为:

```
SYSCALL_DEFINE1(alarm, unsigned int, seconds)
{
	return alarm_setitimer(seconds);
}
```
这样的形式。

其中SYSCALL_DEFINE1在include/linux/syscalls.h中的实现为
```
#define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)
```
SYSCALL_DEFINEx实现为:
```
#define SYSCALL_DEFINEx(x, sname, ...)				\
	SYSCALL_METADATA(sname, x, __VA_ARGS__)			\
	__SYSCALL_DEFINEx(x, sname, __VA_ARGS__)
```
将x=1,sname=_alarm(注意`##name`前的下划线)带入扩展，可得：
```
SYSCALL_METADATA(_alarm, 1, unsigned int,seconds)
__SYSCALL_DEFINEx(1, _alarm,  unsigned int,seconds)
```
其中SYSCALL_METADATA宏依据CONFIG_FTRACE_SYSCALLS的编译选项来扩展，用以支持ftrace机制。如果没有启用FRACE则扩展为一个空宏。
继续看__SYSCALL_DEFINEx的实现：
```
#define __SYSCALL_DEFINEx(x, name, ...)					\
	asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__))	\
		__attribute__((alias(__stringify(SyS##name))));		\
	static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__));	\
	asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__));	\
	asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__))	\
	{								\
		long ret = SYSC##name(__MAP(x,__SC_CAST,__VA_ARGS__));	\
		__MAP(x,__SC_TEST,__VA_ARGS__);				\
		__PROTECT(x, ret,__MAP(x,__SC_ARGS,__VA_ARGS__));	\
		return ret;						\
	}								\
	static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__))
```

按传入参数扩展可得：
```
asmlinkage long sys_alarm(unsigned int seconds)
    __attribute__((alias(__stringify(SyS_alarm))));
static inline long SYSC_alarm(unsigned int seconds);

asmlinkage long SyS_alarm(long seconds);
asmlinkage long SyS_alarm(long seconds)
{
  long ret = SYSC_alarm((unsigned int)seconds);
  BUILD_BUG_ON_ZERO(sizeof(unsigned int) > sizeof(long));
   __PROTECT(1, ret, seconds);
   return ret;	
}
static inline long SYSC_alarm(unsigned int seconds);

```
其中__MAP用于生成形参列表，__stringify就是 把  x 直接转换为字符串。其返回值就是字符串，而不是变量名。
```
#define __MAP0(m,...)
#define __MAP1(m,t,a) m(t,a)
#define __MAP2(m,t,a,...) m(t,a), __MAP1(m,__VA_ARGS__)
#define __MAP3(m,t,a,...) m(t,a), __MAP2(m,__VA_ARGS__)
#define __MAP4(m,t,a,...) m(t,a), __MAP3(m,__VA_ARGS__)
#define __MAP5(m,t,a,...) m(t,a), __MAP4(m,__VA_ARGS__)
#define __MAP6(m,t,a,...) m(t,a), __MAP5(m,__VA_ARGS__)
#define __MAP(n,...) __MAP##n(__VA_ARGS__)
```

```
#define __SC_DECL(t, a) t a
#define __SC_LONG(t, a) __typeof(__builtin_choose_expr(__TYPE_IS_LL(t), 0LL, 0L)) a
#define __SC_CAST(t, a) (t) a
#define __SC_ARGS(t, a) a
#define __SC_TEST(t, a) (void)BUILD_BUG_ON_ZERO(!__TYPE_IS_LL(t) && sizeof(t) > sizeof(long))
```

```
#define __stringify_1(x...)	#x
#define __stringify(x...)	__stringify_1(x)
```
可见SYSCALL_DEFINE1是用于生成只有一个参数的系统调用声明，该宏展开后声明的函数SYSC_alarm类似于老版本内核的sys_alarm。

虽然这样做在软件工程的角度讲可以将系统调用的声明方式归拢到一处(宏定义处)，并易于扩展。但这同时阻碍了很多代码分析工具(source insight,visual studio code)对系统调用的正常识别：会将系统调用当成一个宏的参数，而不是一个函数。这样会影响我们对系统调用实现函数的定位。

我目前对该问题的解决方案是，利用这些系统调用声明宏都是以`SYSCALL_DEFINE`开头的特点，通过文本编辑器(如sublime text)或者grep来在Linux内核项目中找到所有`SYSCALL_DEFINE`出现的地方，就可以定位到所有系统调用声明处了(虽然会有些不是地方，例如文档中，但极少)。如果你有更好的方法，欢迎留言探讨。

例如用grep来完成的命令是：`grep -rn SYSCALL_DEFINE ./`
执行部分结果大致如下：
```
./kernel/time/itimer.c:103:SYSCALL_DEFINE2(getitimer, int, which, struct itimerval __user *, value)
./kernel/time/itimer.c:278:SYSCALL_DEFINE3(setitimer, int, which, struct itimerval __user *, value,
./kernel/time/posix-timers.c:607:SYSCALL_DEFINE3(timer_create, const clockid_t, which_clock,
./kernel/time/posix-timers.c:781:SYSCALL_DEFINE2(timer_gettime, timer_t, timer_id,
./kernel/time/posix-timers.c:817:SYSCALL_DEFINE1(timer_getoverrun, timer_t, timer_id)
./kernel/time/posix-timers.c:885:SYSCALL_DEFINE4(timer_settime, timer_t, timer_id, int, flags,
./kernel/time/posix-timers.c:948:SYSCALL_DEFINE1(timer_delete, timer_t, timer_id)
...

```

从其中可以看到`getitimer`(kernel/time/itimer.c文件中的103行)等系统调用的定义位置。注：我的代码因为加了我自己的一些注释，可能会和你搜索的结果不同。

我把这个命令的输出重定向到文件中，方便查阅系统调用的定义位置。算是对代码分析工具的一个补充吧。

至于用来实现这些系统调用的实现函数，则大多可以通过代码分析工具定位到，方便进行进一步分析。

有了这个命令的执行结果，加上一个趁手的代码阅读工具，就可以继续进行系统调用的分析了。

在本系列文章中，将会聚焦于系统调用的具体实现，站在内核的角度进行描述，假定用户程序已经通过某种机制将系统调用要用到的参数传递到内核中。暂时不会讲述与系统调用实现相关的体系结构相关的知识，例如如何传递调用参数，如何进行特权级切换等。虽然这些内容同样非常重要，但十分依赖具体的硬件架构，而且网上也有很多不错的相关资料。后面如有需要，会加以补充x86-64平台上的实现方式。

在接下来的文章中，我会具体从易到难地讲述几十个经典系统调用的实现方式。对涉及更下层次的具体实现(例如VFS方面)，本系列文章会暂时`浅尝辄止`,不会深入进去。而会另开一些列文章进行叙述。保证这一些列文章都在一个大致相似的实现层次。

在本系列文章的写作中，势必会引用很多书籍，网上的资料。在此先提前感谢！

我也相信我的文章中也会有不少谬误，如有任何疑问，欢迎留言反馈。也可以给我发email:2927098@qq.com